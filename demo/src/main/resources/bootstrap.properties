spring.application.name=demo
base.package=com.hiekn.metacloud.demo
server.address=192.168.1.119
server.port=8888

spring.profiles.active=dev

eureka.client.serviceUrl.defaultZone=http://localhost:9000/eureka/

spring.cloud.config.label=master
spring.cloud.config.profile=${spring.profiles.active}
spring.cloud.config.discovery.enabled=true
spring.cloud.config.discovery.serviceId=config


mybatis.type-aliases-package=${base.package}.bean

spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://192.168.1.159:3306/console?characterEncoding=utf8&amp;autoReconnect=true&amp;failOverReadOnly=false
spring.datasource.username=root
spring.datasource.password=root@hiekn
#验证连接的有效性
spring.datasource.tomcat.test-while-idle=true
#获取连接时候验证，会影响性能
spring.datasource.tomcat.test-on-borrow=false
#在连接归还到连接池时是否测试该连接
spring.datasource.tomcat.test-on-return=false
spring.datasource.tomcat.validation-query=SELECT 1 FROM DUAL
#空闲连接回收的时间间隔，与test-while-idle一起使用，设置5分钟
spring.datasource.tomcat.time-between-eviction-runs-millis=300000
#连接池空闲连接的有效时间 ，设置30分钟
spring.datasource.tomcat.min-evictable-idle-time-millis=1800000
spring.datasource.tomcat.initial-size=5
#指定连接池中最大的活跃连接数.
spring.datasource.tomcat.max-active=50
#指定连接池等待连接返回的最大等待时间，毫秒单位.
spring.datasource.tomcat.max-wait=60000
#指定必须保持连接的最小值
spring.datasource.tomcat.min-idle=5
spring.datasource.tomcat.max-idle=20

spring.redis.host=192.168.1.159

spring.data.mongodb.host=192.168.1.159
spring.data.mongodb.database=db

elasticsearch.host=192.168.1.159:9300
elasticsearch.cluster-name=docker-es

# tomcat最大线程数，默认为200
server.tomcat.max-threads=800
server.tomcat.accept-count=1000
# tomcat的URI编码
server.tomcat.uri-encoding=UTF-8
# 存放Tomcat的日志、Dump等文件的临时文件夹，默认为系统的tmp文件夹（如：C:\Users\Shanhy\AppData\Local\Temp）
server.tomcat.basedir=/work/tomcat
# 打开Tomcat的Access日志，并可以设置日志格式的方法：
server.tomcat.access-log-enabled=true
# accesslog目录，默认在basedir/logs
#server.tomcat.accesslog.directory=

spring.http.encoding.force=true

#spring.mvc.throw-exception-if-no-handler-found=true
#不要为我们工程中的资源文件建立映射
#spring.resources.add-mappings=false

#logging.level.root=info
#org包下的日志级别
#logging.level.org=warn
#默认不写日志文件，超过10M，会生成新的日志文件
#logging.file=my.log

logging.path=${server.tomcat.basedir}/project_logs/meta-cloud/${spring.application.name}

filter.request=false

#Swagger配置
swagger.init=true
swagger.version=1.0.0
swagger.title=${spring.application.name} API
swagger.service.url=http://blog.csdn.net/dh798417147
swagger.resourcePackage=${base.package}.rest